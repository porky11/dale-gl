(module gl)

(import macros)
(import bitset-enum)

(namespace gl
(import util)
 #|
(mfor file ("constants.dt"
            "funcs-gl.dt"
            "funcs-gles1.dt"
            "funcs-gles1-gles2.dt"
            "funcs-gles2.dt"
            "funcs-gl-glcore.dt"
            "funcs-gl-glcore-gles1-gles2.dt"
            "funcs-gl-glcore-gles1-gles2-glsc2.dt"
            "funcs-gl-glcore-gles2.dt"
            "funcs-gl-glcore-gles2-glsc2.dt"
            "funcs-gl-gles1.dt"
            "funcs-gl-gles1-gles2.dt"
            "funcs-gl-gles1-gles2-glsc2.dt"
            "funcs-gl-gles2.dt"
            "funcs-gl-gles2-glsc2.dt" 
            )
  (include file)) |#

  (def-bitset-enum buffer-bit
    extern uint
      ((depth 0x100)
       (accum 0x200)
       (stencil 0x400)
       (color 0x4000)
       (coverage 0x8000)))

  (def-enum capability extern uint
    ((blend 0xBE2)))



  (def-enum pname
    extern uint
      ((shader-type 0x8B4F)
       (delete-status 0x8B80)
       (compile-status 0x8B81)
       (info-log-length 0x8B84)
       (shader-source-length 0x8B88)))



  (def-enum primitive
     extern uint (points
                       lines line-loop line-strip
                       triangles triangle-strip triangle-fan
                       quads quad-strip
                       polygon))

  (def-enum type
    extern uint ((byte 0x1400) ubyte
                       short ushort
                       int uint
                       float
                       bytes-2 bytes-3 bytes-4
                       double))
  (def-enum array
    extern uint ((vertex-array 0x8074) normal-array color-array index-array texture-coord-array edge-flag-array))
(using-namespace std.macros
;;cfun

(defc enable extern glEnable  void ((a capability)))
(defc disable extern glDisable void ((a capability)))

(defc draw-elements extern glDrawElements void ((mode uint) (first int) (count int) (indices (p void))))
(defc vertex-pointer extern glVertexPointer void ((size int) (type uint) (stride int) (ptr (const (p void)))))

(def glGetShaderSource (fn extern-c void ((shader uint) (buf-size int) (lenght (p int)) (source (p char)))))
(def glShaderSource (fn extern-c void ((shader uint) (count int) (source (p (p (const char)))) (lenght (p int)))))
(def glGetShaderiv (fn extern-c void ((shader uint) (pname uint) (params (p int)))))

(def Texture (struct extern ((value uint))))

(def glGenTextures (fn extern-c void ((a int) (tex (p int)))))

(def gen-textures (macro extern ((a int))
  (def gensym (var auto \ (make-gensym-var-node mc)))
  (qq do
    (def (uq gensym) (var auto (array-of (uq a) Texture)))
    (glGenTextures a (cast (uq gensym) (p int)))
    (move (uq gensym)))))



(ignore defc-enum bind-texture extern glBindTexture void ((a (enum uint ((texture-1d 0x0DE0)
                                                                  (texture-2d 0x0DE1)
                                                                  (texture-3d 0x806F)
                                                                  (texture-cube-map 0x8513))))
                                                   (tex Texture)))



#|


(defc-enum tex-image-2d extern glTexImage2D ((target (enum ((texture-2d 0x0DE1)
                                                            (proxy-texture-2d 0x8064)
                                                            ;texture-1d-array
                                                            ;proxy-texture-1d-array
                                                            ;texture-rectangle
                                                            ;proxy-texture-rectangle
                                                            (texture-cube-map 0x8513)
                                                            ;...
                                                            )))
                                             (level glint)
|#

(def glUniform1fv (fn extern-c void ((location int) (count uint) (value (const (p float))))))
(def glUniform2fv (fn extern-c void ((location int) (count uint) (value (const (p float))))))
(def glUniform3fv (fn extern-c void ((location int) (count uint) (value (const (p float))))))
(def glUniform4fv (fn extern-c void ((location int) (count uint) (value (const (p float))))))
(def glUniform1iv (fn extern-c void ((location int) (count uint) (value (const (p int))))))
(def glUniform2iv (fn extern-c void ((location int) (count uint) (value (const (p int))))))
(def glUniform3iv (fn extern-c void ((location int) (count uint) (value (const (p int))))))
(def glUniform4iv (fn extern-c void ((location int) (count uint) (value (const (p int))))))
(def glUniform1uiv (fn extern-c void ((location int) (count uint) (value (const (p uint))))))
(def glUniform2uiv (fn extern-c void ((location int) (count uint) (value (const (p uint))))))
(def glUniform3uiv (fn extern-c void ((location int) (count uint) (value (const (p uint))))))
(def glUniform4uiv (fn extern-c void ((location int) (count uint) (value (const (p uint))))))

;;;types
  (def Shader (struct extern ((value uint))))
  (def Program (struct extern ((value uint))))
  (def Location (struct extern ((value int))))


(defc-multi uniform extern
  (glUniform1f void ((location Location) (v0 float)))
  (glUniform2f void ((location Location) (v0 float) (v1 float)))
  (glUniform3f void ((location Location) (v0 float) (v1 float) (v2 float)))
  (glUniform4f void ((location Location) (v0 float) (v1 float) (v2 float) (v3 float)))

  (glUniform1i void ((location Location) (v0 int)))
  (glUniform2i void ((location Location) (v0 int) (v1 int)))
  (glUniform3i void ((location Location) (v0 int) (v1 int) (v2 int)))
  (glUniform4i void ((location Location) (v0 int) (v1 int) (v2 int) (v3 int)))

  (glUniform1ui void ((location Location) (v0 uint)))
  (glUniform2ui void ((location Location) (v0 uint) (v1 uint)))
  (glUniform3ui void ((location Location) (v0 uint) (v1 uint) (v2 uint)))
  (glUniform4ui void ((location Location) (v0 uint) (v1 uint) (v2 uint) (v3 uint))))

 (def uniform (fn extern void ((location Location) (value (p float)))
    (glUniform1fv (@: location value) 1 value)))
  (def uniform (fn extern void ((location Location) (value (p (array-of 1 float))))
    (glUniform1fv (@: location value) 1 (cast value (p float)))))
  (def uniform (fn extern void ((location Location) (value (p (array-of 2 float))))
    (glUniform2fv (@: location value) 1 (cast value (p float)))))
  (def uniform (fn extern void ((location Location) (value (p (array-of 3 float))))
    (glUniform3fv (@: location value) 1 (cast value (p float)))))
  (def uniform (fn extern void ((location Location) (value (p (array-of 4 float))))
    (glUniform4fv (@: location value) 1 (cast value (p float)))))

  (def uniform (fn extern void ((location Location) (value (p int)))
    (glUniform1iv (@: location value) 1 value)))
  (def uniform (fn extern void ((location Location) (value (p (array-of 1 int))))
    (glUniform1iv (@: location value) 1 (cast value (p int)))))
  (def uniform (fn extern void ((location Location) (value (p (array-of 2 int))))
    (glUniform2iv (@: location value) 1 (cast value (p int)))))
  (def uniform (fn extern void ((location Location) (value (p (array-of 3 int))))
    (glUniform3iv (@: location value) 1 (cast value (p int)))))
  (def uniform (fn extern void ((location Location) (value (p (array-of 4 int))))
    (glUniform4iv (@: location value) 1 (cast value (p int)))))

  (def uniform (fn extern void ((location Location) (value (p uint)))
    (glUniform1uiv (@: location value) 1 value)))
  (def uniform (fn extern void ((location Location) (value (p (array-of 1 uint))))
    (glUniform1uiv (@: location value) 1 (cast value (p uint)))))
  (def uniform (fn extern void ((location Location) (value (p (array-of 2 uint))))
    (glUniform2uiv (@: location value) 1 (cast value (p uint)))))
  (def uniform (fn extern void ((location Location) (value (p (array-of 3 uint))))
    (glUniform3uiv (@: location value) 1 (cast value (p uint)))))
  (def uniform (fn extern void ((location Location) (value (p (array-of 4 uint))))
    (glUniform4uiv (@: location value) 1 (cast value (p uint)))))

  (defc get-uniform-location extern glGetUniformLocation Location ((program Program) (name (p (const char)))))

  (def-enum shader
    extern uint
      ((fragment 0x8B30)
       (vertex 0x8B31)))

  (defc create-shader extern glCreateShader Shader ((shader-t shader)))

  (def shader-source (fn extern void ((the-shader Shader) (str (p (const char))))
    (glShaderSource (@: the-shader value) 1 (# str) (nullptr int))))
  (defc compile-shader extern glCompileShader void ((the-shader Shader)))


  (defc create-program extern glCreateProgram Program (void))

  (defc attach-shader extern glAttachShader void ((program Program) (the-shader Shader)))
  (ignore def attach-shader (macro extern ((program Program) (shader Shader) ...)
    (qq do (attach-shader (uq program) (uq shader))
           (attach-shader (uq program) (uql (get-varargs-list (- (arg-count mc) 2)))))))

    
  (def get-shader-iv (macro extern ((the-shader Shader) (aname pname))
    (let ((name \ (make-gensym-var-node mc)))
      (qq do (def (uq name) (var auto int 0))
             (glGetShaderiv (@: (uq the-shader) value) (value (uq aname)) (# (uq name)))
             (move (uq name))))))

  (defc link-program extern glLinkProgram void ((program Program)))
  (defc use-program extern glUseProgram void ((program Program)))

  (defc clear extern glClear void ((mask buffer-bit)))
  (defc-multi vertex extern
    (glVertex3f void ((x float) (y float) (z float))))
  (defc begin extern glBegin void ((mode primitive)))

  (defc end extern glEnd void (void))
  (defc enable-client-state extern glEnableClientState void ((a array)))
  (defc disable-client-state extern glDisableClientState void (void))
  (defc flush extern glFlush void (void)) 
  (defc draw-arrays extern glDrawArrays void ((mode primitive) (first int) (count int)))
  (def vertex-pointer (macro extern ((size int) (type type) (stride int) ptr)
    (qq glVertexPointer (uq size) (value (uq type)) (uq stride) (cast (uq ptr) (p void)))))

   #|
  (def with-client-state (macro extern (state ...)
    (qq do (enable-client-state (uq state))
           (uql (get-varargs-list (- (argcount mc) 1)))
           (disable-client-state))))
           |#

))
